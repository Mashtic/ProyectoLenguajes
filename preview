#include <stdio.h>
#include <stdbool.h>

#define N 6  // Número de elementos en el álgebra booleana

// Definición de las tablas de operaciones
int suma[N][N];
int mult[N][N];

// Funciones para inicializar las tablas
void inicializarTablas() {
    // Inicializar tabla de suma (+)
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            suma[i][j] = (i + j) % N;  // Ejemplo de inicialización
        }
    }

    // Inicializar tabla de multiplicación (*)
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            mult[i][j] = (i * j) % N;  // Ejemplo de inicialización
        }
    }
}

// Función para verificar la conmutatividad
bool verificarConmutatividad(int tabla[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (tabla[i][j] != tabla[j][i]) {
                return false;
            }
        }
    }
    return true;
}

// Función para verificar la distributividad
bool verificarDistributividad() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            for (int k = 0; k < N; k++) {
                if (mult[i][suma[j][k]] != suma[mult[i][j]][mult[i][k]]) {
                    return false;
                }
            }
        }
    }
    return true;
}

// Función para verificar la existencia de neutros
bool verificarNeutros() {
    bool tieneSumaNeutro = false;
    bool tieneMultNeutro = false;

    // Verificar neutro para la suma
    for (int i = 0; i < N; i++) {
        bool esNeutro = true;
        for (int j = 0; j < N; j++) {
            if (suma[i][j] != j || suma[j][i] != j) {
                esNeutro = false;
                break;
            }
        }
        if (esNeutro) {
            tieneSumaNeutro = true;
            break;
        }
    }

    // Verificar neutro para la multiplicación
    for (int i = 0; i < N; i++) {
        bool esNeutro = true;
        for (int j = 0; j < N; j++) {
            if (mult[i][j] != j || mult[j][i] != j) {
                esNeutro = false;
                break;
            }
        }
        if (esNeutro) {
            tieneMultNeutro = true;
            break;
        }
    }

    return tieneSumaNeutro && tieneMultNeutro;
}

// Función para verificar los complementos
bool verificarComplementos() {
    for (int i = 0; i < N; i++) {
        bool tieneComplemento = false;
        for (int j = 0; j < N; j++) {
            if (suma[i][j] == 0 && mult[i][j] == 1) {
                tieneComplemento = true;
                break;
            }
        }
        if (!tieneComplemento) {
            return false;
        }
    }
    return true;
}

int main() {
    inicializarTablas();

    printf("Verificando álgebra booleana de 6 elementos...\n");

    if (!verificarConmutatividad(suma) || !verificarConmutatividad(mult)) {
        printf("El álgebra no cumple con la conmutatividad.\n");
        return 1;
    }

    if (!verificarDistributividad()) {
        printf("El álgebra no cumple con la distributividad.\n");
        return 1;
    }

    if (!verificarNeutros()) {
        printf("El álgebra no tiene neutros válidos.\n");
        return 1;
    }

    if (!verificarComplementos()) {
        printf("El álgebra no tiene complementos válidos.\n");
        return 1;
    }

    printf("El álgebra cumple con todas las propiedades.\n");
    return 0;
}
